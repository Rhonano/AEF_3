library(tidyr)
library(tidyverse)
library(lubridate)
library(tidyquant)
library(Matrix)
library(dplyr)
library(purrr)
library(ggplot2)
library(slider)

set.seed(2021)

setwd("/users/madsrefer/desktop/r projects/assignment 3")
data <- load("data_mandatory_assignment_3.Rdata")

##I prepare the data
returns <- returns %>% 
  select(-date) %>% 
  as.matrix()

returns <- returns/100

ill <- amihud_measures %>% 
  select(-ticker) %>% 
  as.matrix() 

B <- Diagonal(x=ill, n=length(ill)) %>% 
  as.matrix()


compute_ledoit_wolf <- function(x){
  # Computes Ledoit-Wolf shrinkage covariance estimator
  # This function generates the Ledoit-Wolf covariance estimator  as proposed in Ledoit, Wolf 2004 (Honey, I shrunk the sample covariance matrix.)
  # X is a (t x n) matrix of returns
  t <- nrow(x)
  n <- ncol(x)
  x <- apply(x, 2, function(x) if (is.numeric(x)) # demean x
    x - mean(x) else x)
  sample <- (1/t)*(t(x)%*%x)
  var <- diag(sample)
  sqrtvar <- sqrt(var)
  rBar <- (sum(sum(sample/(sqrtvar %*% t(sqrtvar)))) - n)/(n * (n - 1))
  prior <- rBar * sqrtvar %*% t(sqrtvar)
  diag(prior) <- var
  y <- x^2
  phiMat <- t(y) %*% y/t - 2 * (t(x) %*% x) * sample/t + sample^2
  phi <- sum(phiMat)
  repmat = function(X, m, n) {
    X <- as.matrix(X)
    mx = dim(X)[1]
    nx = dim(X)[2]
    matrix(t(matrix(X, mx, nx * n)), mx * m, nx * n, byrow = T)
  }
  
  term1 <- (t(x^3) %*% x)/t
  help <- t(x) %*% x/t
  helpDiag <- diag(help)
  term2 <- repmat(helpDiag, 1, n) * sample
  term3 <- help * repmat(var, 1, n)
  term4 <- repmat(var, 1, n) * sample
  thetaMat <- term1 - term2 - term3 + term4
  diag(thetaMat) <- 0
  rho <- sum(diag(phiMat)) + rBar * sum(sum(((1/sqrtvar) %*% t(sqrtvar)) * thetaMat))
  
  gamma <- sum(diag(t(sample - prior) %*% (sample - prior)))
  kappa <- (phi - rho)/gamma
  shrinkage <- max(0, min(1, kappa/t))
  if (is.nan(shrinkage))
    shrinkage <- 1
  sigma <- shrinkage * prior + (1 - shrinkage) * sample
  return(sigma)
}
Sigma <- compute_ledoit_wolf(returns) %>% 
  as.matrix()
mu <- 0 * colMeans(returns) %>% 
  as.matrix()
gamma <- 4
N <- ncol(Sigma)
##function that computes optimal weights:
optimal_tc_weight <- function(w_prev,
                              mu, 
                              Sigma, 
                              beta = 1 , 
                              gamma = 4,
                              B){
  N <- ncol(Sigma)
  iota <- rep(1, N)
  Sigma_star <- Sigma + beta / gamma * B
  mu_star <- mu + beta * B %*% w_prev
  
  Sigma_inv <- solve(Sigma_star)
  
  w_mvp <- Sigma_inv %*% iota
  w_mvp <- w_mvp / sum(w_mvp)
  w_opt <- w_mvp  + 1/gamma * (Sigma_inv - w_mvp %*% t(iota) %*% Sigma_inv) %*% mu_star
  return(w_opt)
}
# MVP weights without TC
optimal_mvp_weight <- function(w_prev,
                               mu, 
                               Sigma, 
                               beta = 0 , 
                               gamma = 4){
  N <- ncol(Sigma) # columns
  iota <- rep(1, N) # indicator function
  Sigma_star <- Sigma + beta / gamma * diag(N) # as without illiquidity
  mu_star <- mu + beta * w_prev
  
  Sigma_inv <- solve(Sigma_star) # invert variance-covariance matrix
  
  w_mvp <- Sigma_inv %*% iota  # turning weights into N x 1 matrix
  w_mvp <- w_mvp / sum(w_mvp)  # weights must sum to 1
  w_opt <- w_mvp  + 1/gamma * (Sigma_inv - w_mvp %*% t(iota) %*% Sigma_inv) %*% mu_star
  
  return(w_opt)
}
w_next <- optimal_tc_weight(rep(1/N, N), mu, Sigma, beta = 1, gamma = 4,B)
my_matrix <- matrix(ncol=5000, nrow=40)
for(i in 1:5000){
  w_next <- optimal_tc_weight(w_next, mu, Sigma, beta = 1, gamma = 4,B)
  my_matrix[,i] <- w_next
}

w <- as.vector(w)
convergence <- my_matrix-w
matplot(t(convergence), type = "l", xlab="time", ylab="difference between")
# Closed form solution 
w <- solve(Sigma) %*% rep(1, ncol(Sigma))
w <- w / sum(w)
w

# Illustrate effect of Turnover penalization


beta_concentration <- function(beta){
  return(sum((optimal_tc_weight(rep(1/N, N), mu, Sigma, beta = beta, gamma = 4,B) - rep(1/N, N))^2))
}

beta_effect <- tibble(beta = 20 * qexp((1:99)/100)) %>% 
  mutate(concentration = map_dbl(beta, beta_concentration))

beta_effect %>% 
  ggplot(aes(x = beta, y = concentration)) + 
  geom_line() +
  labs(x = "Transaction cost parameter", 
       y = "Rebalancing")
# OOS experiment 
window_length <- 250
periods <- nrow(returns) - window_length # total number of out-of-sample periods

oos_values <- matrix(NA, 
                     nrow = periods, 
                     ncol = 3) # A matrix to collect all returns
colnames(oos_values) <- c("raw_return", "turnover", "net_return") # we implement 3 strategies

all_values <- list(oos_values)

w_prev_1 <- rep(1/N ,N)


OOS_sharpe <- function(beta){
for(i in 1:periods){ # Rolling window

  # Extract information
  return_window <- returns[i : (i + window_length - 1),] # the last X returns available up to date t
  
  # Sample moments 
  Sigma <- cov(return_window) 
  mu <- 0 * colMeans(return_window)
  
  # Optimal TC robust portfolio
  w_1 <- optimal_tc_weight(w_prev = w_prev_1, mu = mu, Sigma = Sigma, beta = beta, gamma = gamma, B)
  # Evaluation
  raw_return <- returns[i + window_length, ] %*% w_1
  turnover <- sum(B%*%(as.vector(w_1)-as.vector(w_prev_1))^2)
  # Store realized returns
  net_return <- raw_return - beta/2 * turnover 
  all_values[[1]][i, ] <- c(raw_return, turnover, net_return)
  #cat(round(c(100 * i/periods, raw_return, turnover, net_return), 2), "\n")
  #Computes adjusted weights based on the weights and next period returns
  w_prev_1 <- w_1 * as.vector(1 + returns[i + window_length, ] / 100)
  w_prev_1 <- w_prev_1 / sum(as.vector(w_prev_1))
}
  all_values <- lapply(all_values, as_tibble) %>% bind_rows(.id = "strategy")
  
  all_values %>%
    group_by(strategy) %>%
    summarise(Mean = 250*mean(net_return),
              SD = sqrt(250) * sd(net_return),
              Sharpe = Mean/SD,
              Turnover = 100 * mean(turnover)) %>%
    mutate(strategy = case_when(strategy == 1 ~ "MV (TC)"
                                )) %>% 
    pull(Sharpe)

}
OOS_sharpe(1)
# Define the effect of transaction costs on performance
beta_values <-  seq(from = 1, to = 100, by = 1)

# Sharpe ratio for different values of beta
sharpe_ratios <- matrix(0, length(beta_values), 3, dimnames =
                          list(as.character(sort(beta_values)), c("MV TC", "Naive", "MV")))
counter = 1

# Loop over the sequence of feasible beta-values
for (beta in seq_along(beta_values)){
  output_temp <- OOS_sharpe(beta)
  sharpe_ratios[counter, ] <- output_temp %>%as.matrix()
  counter <- counter + 1
}
oos_data <- bind_cols(beta = beta_values,sharpe = sharpe_ratios[,1])

sharpe_plot <- oos_data %>% 
  ggplot(aes(x = beta, y = sharpe)) + 
  geom_line() +
  labs(x = "Beta Values", 
       y = "Annulized Sharpe Ratios")
sharpe_plot

###Exercise 4
# OOS experiment 
backtest <- function(x){
window_length <- x

oos_values <- matrix(NA, 
                     nrow = periods, 
                     ncol = 3) # A matrix to collect all returns
colnames(oos_values) <- c("raw_return", "turnover", "net_return") # we implement 3 strategies

all_values_2 <- list(oos_values, 
                   oos_values,
                   oos_values)

w_prev_1 <- w_prev_2 <- w_prev_3 <- rep(1/N ,N)

for(i in 1:periods){ # Rolling window
  # Extract information
  return_window <- returns[i : (i + window_length - 1),] # the last X returns available up to date t
  
  # Sample moments 
  Sigma <- cov(return_window) 
  mu <- 0 * colMeans(return_window)
  
  
  beta <- 0.005
  # Optimal TC robust portfolio
  w_1 <- optimal_tc_weight(w_prev = w_prev_1, mu = mu, Sigma = Sigma, beta = 0.005, gamma = gamma, B)
  # Evaluation
  raw_return <- returns[i + window_length, ] %*% w_1
  turnover <- sum(abs(as.vector(w_1)-as.vector(w_prev_1)))
  # Store realized returns
  net_return <- raw_return - beta * turnover 
  all_values_2[[1]][i, ] <- c(raw_return, turnover, net_return)
  #cat(round(c(100 * i/periods, raw_return, turnover, net_return), 2), "\n")
  #Computes adjusted weights based on the weights and next period returns
  w_prev_1 <- w_1 * as.vector(1 + returns[i + window_length, ] / 100)
  w_prev_1 <- w_prev_1 / sum(as.vector(w_prev_1))
  
  # Naive Portfolio 
  w_2 <- rep(1/N, N)
  # Evaluation
  raw_return <- returns[i + window_length, ] %*% w_2
  turnover <- sum(abs(as.vector(w_2)-as.vector(w_prev_2)))
  # Store realized returns
  net_return <- raw_return - beta * turnover
  all_values_2[[2]][i, ] <- c(raw_return, turnover, net_return)
  #Computes adjusted weights based on the weights and next period returns
  w_prev_2 <- w_2 * as.vector(1 + returns[i + window_length, ] / 100)
  w_prev_2 <- w_prev_2 / sum(as.vector(w_prev_2))
  
  # Mean-variance efficient portfolio
  w_3 <- optimal_mvp_weight(w_prev = w_prev_3, mu = mu, Sigma = Sigma, beta = 0, gamma = gamma)
  # Evaluation
  raw_return <- returns[i + window_length, ] %*% w_3
  turnover <- sum(abs(as.vector(w_3) - as.vector(w_prev_3)))
  # Store realized returns
  net_return <- raw_return - beta * turnover
  all_values_2[[3]][i, ] <- c(raw_return, turnover, net_return)
  #Computes adjusted weights based on the weights and next period returns
  w_prev_3 <- w_3 * as.vector(1 + returns[i + window_length, ] / 100)
  w_prev_3 <- w_prev_3 / sum(as.vector(w_prev_3))
}

all_values_2 <- lapply(all_values_2, as_tibble) %>% bind_rows(.id = "strategy")

results <- all_values_2 %>%
  group_by(strategy) %>%
  summarise(Mean = 250*mean(net_return),
            SD = sqrt(250) * sd(net_return),
            Sharpe = Mean/SD,
            Turnover = 100 * mean(turnover)) %>%
  mutate(strategy = case_when(strategy == 1 ~ "MV (TC)",
                              strategy == 2 ~ "Naive", 
                              strategy == 3 ~ "MV")) 
return(results)
}
backtest(250)
